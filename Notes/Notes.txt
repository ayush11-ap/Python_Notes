## Episode 1:
    - Python Inner Working 

    - Python code is converted into [Byte Code](which is hidden in some cases it's visible like while import and all) & then it is fetched in the [Python Virtual Machine] inside this program/scripts are executed.
        - 1. first it's compile[slang] to Byte Code which is [low level] & [Platform Independent]
        - 2. Byte Code runs faster. .pyc is a compiled python [aka frozen Binaries]
        - 3. Python also uses diff algorithms internally for doing changes in [313(vesion of python)].pyc

    - PVM - Python Virtual Machine
        - Bcoz of PVM python is known as the interpreted language.
        - Byte Code is NOT Machine Code
            - Machine Code can give direct instruction to the Apple/intel chip i.e hardware
        - Byte Code is python specific interpretation
        - cpython it's a standard implementation
            - various types of python : jython, Iron Python, Stackless, PyPy, etc.

## Episode 2:
    ~ Errors:
        - NameError: name 'variableName' is not defined
        - keyError: "keyName" - there is no key in the dictionary, error in dictionary

    - with python `os` is bydefault library
        - os.getcwd()       -> gives current working directory

    - To reload Shell : from importlib import reload
        - reload(`fileName`)

    - mutable : can be changed
    - Garbage collection is done automatically in Python
    - watch it again
    
    - # --> comments in js

## Episode 3: Object Types / Data Types
    - [] : brackets
    - () : paranthesis
    - {} : curly braces / braces
    - Number : int, float, complex --> 1, 1.0, 1+2j
    - String : str --> 'ayush'
    - List : list --> [1, 2, 3]
    - Tuple : tuple --> (1, 2, 3)
    - Dictionary : dict --> {'key': 'value'}

    - Set : set('abbc') --> {'a', 'b', 'c'}

    - File : file --> open('file.txt', 'r')

    - Boolean : bool --> True, False
    - None : NoneType --> None
    - Functions, modules, classes
    - Advance: Decorators, Generators, Iterators, MetaProgramming


## Episode 4:
    - In Python data type is stored in the memory not in the variable like: int, string, etc.

    # Numbers:
        - () has high preference while solving the problems
            eg: (x + y) * z     --> first the paranthesis will be solve and after that multiplied by z

        - Difference between repr(), str(), print():
        repr(): Returns a string that represents the object as it is, typically used for debugging. It aims to be unambiguous.
            eg: x = [1, 2, 3]
                print(repr(x))  # Output: '[1, 2, 3]'
            
        str(): Returns a readable or user-friendly string representation of the object.
            eg: x = [1, 2, 3]
                print(str(x))  # Output: '[1, 2, 3]'
            
        print(): Displays the output of str() (by default) to the console.
            eg: x = [1, 2, 3]
                print(x)  # Output: [1, 2, 3]

        - math library:
            - math.floor(3.14) --> 3 : returns the largest integer less than or equal to a given number.
                eg: math.floor(-3.14) --> -4
            - math.trunc(3.14) --> 3 : returns the truncated integer part of a number.
                eg: math.trunc(-3.14) --> -3
        
        - literals
            - oct(10) --> '0o12' : returns the octal representation of a number.
            - hex(10) --> '0xa' : returns the hexadecimal representation of a number.
            - bin(10) --> '0b1010' : returns the binary representation of a number.
            - int('64', 8) --> 52 : converts a string to an integer with the given base.


    # Strings:
        - name = "Ayush"
          print(name[0]) --> A

        - Slicing : name[0:3] --> Ayu

        - slicing with num_list = "0123456789"
            - num_list[::2] --> 02468
            - num_list[::-1] --> 9876543210
            - num_list[0:7:3] --> 036
            - num_list[2:9:4] --> 26

        - Methods
            - name = "  Ayush    "
                - name.upper() -->    AYUSH   
                - name.lower() -->    ayush   
                - name.strip() --> Ayush
                - name.replace("Ayush", "Pawar") --> Pawar
            
            - list = "1,2,3,4,5"
                - list.split(",") --> ['1', '2', '3', '4', '5']
                    split() : splits the string into a list of substrings.

            - name = "aayush"
                - print(name.find("y")) --> 2
                    find() : returns the index of the first occurrence of the substring.
                - print(name.count("a")) --> 2 
                    count() : returns the number of occurrences of a substring in the given string.

        - new_list = ["Graphes", "is", "good"] 
            - print("-".join(new_list)) --> Graphes-is-good
                join() : joins the elements of an iterable to the end of the string.

        - len(variableName) : returns the length of the string.

        - food = "Indian, \"Misal is Awesome\""
            - print(food) --> Indian, "Misal is Awesome"
                Escape Character : \
                - r : raw string
                    eg: print(r"Indian, \"Misal is Awesome\"") --> Indian, \"Misal is Awesome\"

        - print("Ayush" in name) --> True

Completed till 09_Strings in Python