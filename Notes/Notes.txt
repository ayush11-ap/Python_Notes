## Episode 1:
    - Python Inner Working 

    - Python code is converted into [Byte Code](which is hidden in some cases it's visible like while import and all) & then it is fetched in the [Python Virtual Machine] inside this program/scripts are executed.
        - 1. first it's compile[slang] to Byte Code which is [low level] & [Platform Independent]
        - 2. Byte Code runs faster. .pyc is a compiled python [aka frozen Binaries]
        - 3. Python also uses diff algorithms internally for doing changes in [313(vesion of python)].pyc

    - PVM - Python Virtual Machine
        - Bcoz of PVM python is known as the interpreted language.
        - Byte Code is NOT Machine Code
            - Machine Code can give direct instruction to the Apple/intel chip i.e hardware
        - Byte Code is python specific interpretation
        - cpython it's a standard implementation
            - various types of python : jython, Iron Python, Stackless, PyPy, etc.

## Episode 2:
    ~ Errors:
        - NameError: name 'variableName' is not defined
        - keyError: "keyName" - there is no key in the dictionary, error in dictionary

    - with python `os` is bydefault library
        - os.getcwd()       -> gives current working directory

    - To reload Shell : from importlib import reload
        - reload(`fileName`)

    - mutable : can be changed
    - Garbage collection is done automatically in Python
    - watch it again
    
    - # --> comments in js

## Episode 3: Object Types / Data Types
    - [] : brackets
    - () : paranthesis
    - {} : curly braces / braces
    - Number : int, float, complex --> 1, 1.0, 1+2j
    - String : str --> 'ayush'
    - List : list --> [1, 2, 3]
    - Tuple : tuple --> (1, 2, 3)
    - Dictionary : dict --> {'key': 'value'}

    - Set : set('abbc') --> {'a', 'b', 'c'}

    - File : file --> open('file.txt', 'r')

    - Boolean : bool --> True, False
    - None : NoneType --> None
    - Functions, modules, classes
    - Advance: Decorators, Generators, Iterators, MetaProgramming


## Episode 4:
    - In Python data type is stored in the memory not in the variable like: int, string, etc.

    # Numbers:
        - () has high preference while solving the problems
            eg: (x + y) * z     --> first the paranthesis will be solve and after that multiplied by z

        - Difference between repr(), str(), print():
        repr(): Returns a string that represents the object as it is, typically used for debugging. It aims to be unambiguous.
            eg: x = [1, 2, 3]
                print(repr(x))  # Output: '[1, 2, 3]'
            
        str(): Returns a readable or user-friendly string representation of the object.
            eg: x = [1, 2, 3]
                print(str(x))  # Output: '[1, 2, 3]'
            
        print(): Displays the output of str() (by default) to the console.
            eg: x = [1, 2, 3]
                print(x)  # Output: [1, 2, 3]

        - math library:
            - math.floor(3.14) --> 3 : returns the largest integer less than or equal to a given number.
                eg: math.floor(-3.14) --> -4
            - math.trunc(3.14) --> 3 : returns the truncated integer part of a number.
                eg: math.trunc(-3.14) --> -3
        
        - literals
            - oct(10) --> '0o12' : returns the octal representation of a number.
            - hex(10) --> '0xa' : returns the hexadecimal representation of a number.
            - bin(10) --> '0b1010' : returns the binary representation of a number.
            - int('64', 8) --> 52 : converts a string to an integer with the given base.

Completed till 08_Number in depth in Python